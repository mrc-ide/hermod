% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_explicit}
\alias{task_create_explicit}
\title{Create explicit task}
\usage{
task_create_explicit(
  expr,
  export = NULL,
  envir = parent.frame(),
  environment = "default",
  driver = NULL,
  resources = NULL,
  envvars = NULL,
  parallel = NULL,
  root = NULL
)
}
\arguments{
\item{expr}{Unevaluated expression object, e.g., from \code{quote}}

\item{export}{Optional character vector of names of objects to
export into the evaluating environment}

\item{envir}{Local R environment in which to find variables for
\code{export}. The default is the parent frame, which will
often do the right thing.  Another sensible choice is
\code{.GlobalEnv} to use the global environment.}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{driver}{Name of the driver to use to submit the task.  The
default (\code{NULL}) depends on your configured drivers; if you have
no drivers configured no submission happens (or indeed is
possible).  If you have exactly one driver configured we'll
submit your task with it.  If you have more than one driver
configured, then we will error, though in future versions we may
fall back on a default driver if you have one configured.  If
you pass \code{FALSE} here, submission is prevented even if you have
no driver configured.
is configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.}

\item{parallel}{Parallel configuration as generated by
\link{hipercow_parallel}, which defines which method, if any, will be used
to initialise your task for parallel execution.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A task id, a string of hex characters. Use this to
interact with the task.
}
\description{
Create an explicit task. Explicit tasks are the simplest sort of
task in hipercow and do nothing magic. They accept an R expression
(from \code{quote} or friends) and possibly a set of variables to
export from the global environment.  This can then be run on a
cluster by loading your variables and running your expression.  If
your expression depends on packages being \emph{attached} then you
should pass a vector of package names too.  This function may
disappear, and is used by us to think about the package, it's not
designed to really be used.
}
\examples{
cleanup <- hipercow_example_helper()

# About the most simple task that can be created:
id <- task_create_explicit(quote(sqrt(2)))
task_wait(id)
task_result(id)

# Variables are not automatically included with the expression:
a <- 5
id <- task_create_explicit(quote(sqrt(a)))
task_info(id)
task_wait(id)
task_result(id)

# Include variables by passing them via 'export':
id <- task_create_explicit(quote(sqrt(a)), export = "a")
task_info(id)
task_wait(id)
task_result(id)

cleanup()
}
