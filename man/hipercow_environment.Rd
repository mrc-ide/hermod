% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/environment.R
\name{hipercow_environment_create}
\alias{hipercow_environment_create}
\alias{hipercow_environment_list}
\alias{hipercow_environment_delete}
\alias{hipercow_environment_show}
\alias{hipercow_environment_exists}
\title{Manage environments}
\usage{
hipercow_environment_create(
  name = "default",
  packages = NULL,
  sources = NULL,
  globals = NULL,
  overwrite = TRUE,
  root = NULL
)

hipercow_environment_list(root = NULL)

hipercow_environment_delete(name = "default", root = NULL)

hipercow_environment_show(name = "default", root = NULL)

hipercow_environment_exists(name = "default", root = NULL)
}
\arguments{
\item{name}{Name of the environment. The name \code{default} is
special; this is the environment that will be used by default
(hence the name!).  Environment names can contain letters,
numbers, hyphens and underscores.}

\item{packages}{Packages to be \emph{attached} before starting a
task. These will be loaded with \code{library()} before the \code{sources}
are sourced.  If you need to attach a package \emph{after} a script
for some reason, just call \code{library} yourself within one of your
\code{source} files.}

\item{sources}{Files to source before starting a task. These will
be sourced into the global (or execution) environment of the
task. The paths must be relative to the hipercow root, not the
working directory.}

\item{globals}{Names of global objects that we can assume exist
within this environment.  This might include function
definitions or large data objects.  The special value \code{TRUE}
triggers automatic detection of objects within your environment
(this takes a few seconds and requires that the environment is
constructable on your local machine too, so is not currently
enabled by default).}

\item{overwrite}{On environment creation, replace an environment
with the same name.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
Nothing, all are called for their side effects.
}
\description{
Create, update, list, view and delete environments.
}
\examples{
cleanup <- hipercow_example_helper()

# Suppose you have a file with some functions you want to use in
# your task:
writeLines("simulation <- function(n) cumsum(rnorm(n))", "myfuns.R")

# Update the default environment to include these functions (or in
# this example, just this one function)
hipercow_environment_create(sources = "myfuns.R")

# You can now use this function in your tasks:
id <- task_create_expr(simulation(5))
task_wait(id)
task_result(id)

cleanup()
}
