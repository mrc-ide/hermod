% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{task_status}
\alias{task_status}
\title{Get task status}
\usage{
task_status(id, follow = TRUE, root = NULL)
}
\arguments{
\item{id}{The task identifier}

\item{follow}{Logical, indicating if we should follow any retried
tasks.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A string with the task status. Tasks that do not exist
will have a status of \code{NA}.
}
\description{
Get the status of a task. See Details for the lifecycle.
}
\details{
A task passes through a lifecycle:
\itemize{
\item \code{created}
\item \code{submitted}
\item \code{running}
\item \code{success}, \code{failure}, \code{cancelled}
}

These occur in increasing order and the result of this function is
the furthest through this list.

Later, we will introduce other types to cope with tasks that are
blocked on dependencies (or have become impossible due to failed
dependencies).
}
\examples{
hipercow_example_helper()

ids <- c(task_create_expr(runif(1)), task_create_expr(runif(1)))
# Depending on how fast these tasks get picked up they will be one
# of 'submitted', 'running' or 'success':
task_status(ids)

# Wait until both tasks are complete
task_wait(ids[[1]])
task_wait(ids[[2]])
# And both are success now
task_status(ids)
}
