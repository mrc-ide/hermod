% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_bulk_expr}
\alias{task_create_bulk_expr}
\title{Create bulk tasks via with expressions}
\usage{
task_create_bulk_expr(
  expr,
  data,
  environment = "default",
  submit = NULL,
  resources = NULL,
  root = NULL
)
}
\arguments{
\item{expr}{An expression, as for \link{task_create_expr}}

\item{data}{Data that you wish to inject \emph{row-wise} into the expression}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{submit}{Control over task submission. This will expand over
time once we support specifying resources. The most simple
interface is to use \code{TRUE} here to automatically submit a task,
using your default configuration, or \code{FALSE} to prevent
submission.  The default \code{NULL} will submit a task if a driver
is configured.}

\item{resources}{A list generated by \code{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A vector of ids, with the same length as \code{data} has rows.
}
\description{
Create a bulk set of tasks. This is an experimental interface and
does not have an analogue within didehpc.  Variables in \code{data}
take precedence over variables in the environment in which \code{expr}
was created. There is no "pronoun" support yet (see rlang docs).
Use \verb{!!} to pull a variable from the environment if you need to,
but be careful not to inject something really large (e.g., any
vector really) or you'll end up with a revolting expression and
poor backtraces.  We will likely change some of these semantics
later, be careful.
}
