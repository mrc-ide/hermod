% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_bulk_expr}
\alias{task_create_bulk_expr}
\title{Create bulk tasks via with expressions}
\usage{
task_create_bulk_expr(
  expr,
  data,
  environment = "default",
  bundle_name = NULL,
  driver = NULL,
  resources = NULL,
  envvars = NULL,
  parallel = NULL,
  root = NULL
)
}
\arguments{
\item{expr}{An expression, as for \link{task_create_expr}}

\item{data}{Data that you wish to inject \emph{row-wise} into the expression}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{bundle_name}{Name to pass to \code{\link{hipercow_bundle_create}} when
making a bundle. If \code{NULL} we use a random name.  We always
overwrite, so if \code{bundle_name} already refers to a bundle it
will be replaced.}

\item{driver}{Name of the driver to use to submit the task.  The
default (\code{NULL}) depends on your configured drivers; if you have
no drivers configured no submission happens (or indeed is
possible).  If you have exactly one driver configured we'll
submit your task with it.  If you have more than one driver
configured, then we will error, though in future versions we may
fall back on a default driver if you have one configured.  If
you pass \code{FALSE} here, submission is prevented even if you have
no driver configured.
is configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.}

\item{parallel}{Parallel configuration as generated by
\link{hipercow_parallel}, which defines which method, if any, will be used
to initialise your task for parallel execution.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A \code{hipercow_bundle} object, which groups together tasks,
and for which you can use a set of grouped functions to get
status (\code{hipercow_bundle_status}), results
(\code{hipercow_bundle_result}) etc.
}
\description{
Create a bulk set of tasks. This is an experimental interface and
does not have an analogue within didehpc.  Variables in \code{data}
take precedence over variables in the environment in which \code{expr}
was created. There is no "pronoun" support yet (see rlang docs).
Use \verb{!!} to pull a variable from the environment if you need to,
but be careful not to inject something really large (e.g., any
vector really) or you'll end up with a revolting expression and
poor backtraces.  We will likely change some of these semantics
later, be careful.
}
\examples{
cleanup <- hipercow_example_helper()

# Suppose we have a data.frame:
d <- data.frame(a = 1:5, b = runif(5))

# We can create a "bundle" by applying an expression involving "a"
# and "b":
bundle <- task_create_bulk_expr(sqrt(a * b), d)

# Once you have your bundle, interact with it using the bundle
# analogues of the usual task functions:
hipercow_bundle_wait(bundle)
hipercow_bundle_result(bundle)

cleanup()
}
\seealso{
\link{hipercow_bundle_wait}, \link{hipercow_bundle_result} for
working with bundles of tasks
}
