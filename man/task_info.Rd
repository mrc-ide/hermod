% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{task_info}
\alias{task_info}
\title{Fetch task information}
\usage{
task_info(id, follow = TRUE, root = NULL)
}
\arguments{
\item{id}{A single task id to fetch information for}

\item{follow}{Logical, indicating if we should follow any retried
tasks.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
An object of class \code{hipercow_task_info}, which will print
nicely.  This is just a list with elements:
\itemize{
\item \code{id}: the task identifier
\item \code{status}: the retrieved status
\item \code{driver}: the driver used to run the task (or NA)
\item \code{data}: the task data (depends on the type of task)
\item \code{times}: a vector of times
\item \code{retry_chain}: the retry chain (or \code{NULL})
}

You can see and access these elements more easily by running
\code{unclass()} on the result of \code{task_info()}.
}
\description{
Fetch information about a task.  This is much more detailed than
the information in \code{task_status}.  If a task is running we also
fetch the true status via its driver, which can be slower.
}
\examples{
hipercow_example_helper()
id <- task_create_expr(runif(1))
task_wait(id)

# Task information at completion includes times:
task_info(id)

# If you need to work with these times, use the "times" element:
task_info(id)$times

# If a task is retried, this information appears as a retry chain:
id2 <- task_retry(id)
task_info(id2, follow = FALSE)
task_info(id2)
}
