% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_script}
\alias{task_create_script}
\title{Create script task}
\usage{
task_create_script(
  script,
  chdir = FALSE,
  echo = TRUE,
  environment = "default",
  driver = NULL,
  resources = NULL,
  envvars = NULL,
  parallel = NULL,
  root = NULL
)
}
\arguments{
\item{script}{Path for the script}

\item{chdir}{Logical, indicating if we should change the working
directory to the directory containing \code{script} before executing
it (similar to the \code{chdir} argument to \code{\link{source}}).}

\item{echo}{Passed through to \code{source} to control printing while
evaluating.  Generally you will want to leave this as \code{TRUE}}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{driver}{Name of the driver to use to submit the task.  The
default (\code{NULL}) depends on your configured drivers; if you have
no drivers configured no submission happens (or indeed is
possible).  If you have exactly one driver configured we'll
submit your task with it.  If you have more than one driver
configured, then we will error, though in future versions we may
fall back on a default driver if you have one configured.  If
you pass \code{FALSE} here, submission is prevented even if you have
no driver configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.
These will be combined with the default environment variables
(see \code{vignettes("details")}, this can be overridden by the
option \code{hipercow.default_envvars}), and any driver-specific
environment variables (see \code{vignette("windows")}).  Variables
provided here have the highest precedence.  You can \strong{unset} an
environment variable by setting it to \code{NA}.}

\item{parallel}{Parallel configuration as generated by
\link{hipercow_parallel}, which defines which method, if any, will be used
to initialise your task for parallel execution.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A task id, a string of hex characters. Use this to
interact with the task.
}
\description{
Create a task from a script.  This will arrange to run the file
\code{script} via hipercow.  The script must exist within your hipercow
root, but you may change to the directory of the script as it
executes (otherwise we will evaluate from your current directory
relative to the hipercow root, as usual).
}
\examples{
cleanup <- hipercow_example_helper()

# Create a small script; this would usually be several lines of
# course.  The script will need to do something as a side effect
# to be worth calling, so here we write a file.
writeLines("saveRDS(mtcars, 'data.rds')", "script.R")

# Now create a task from this script
id <- task_create_script("script.R")
task_info(id)
task_wait(id)
task_result(id)
dir()

cleanup()
}
