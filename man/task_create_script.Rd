% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_script}
\alias{task_create_script}
\title{Create script task}
\usage{
task_create_script(
  script,
  chdir = FALSE,
  echo = TRUE,
  environment = "default",
  submit = NULL,
  resources = NULL,
  envvars = NULL,
  parallel = NULL,
  root = NULL
)
}
\arguments{
\item{script}{Path for the script}

\item{chdir}{Logical, indicating if we should change the working
directory to the directory containing \code{script} before executing
it (similar to the \code{chdir} argument to \code{\link{source}}).}

\item{echo}{Passed through to \code{source} to control printing while
evaluating.  Generally you will want to leave this as \code{TRUE}}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{submit}{Control over task submission. This will expand over
time once we support specifying resources. The most simple
interface is to use \code{TRUE} here to automatically submit a task,
using your default configuration, or \code{FALSE} to prevent
submission.  The default \code{NULL} will submit a task if a driver
is configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.}

\item{parallel}{Parallel configuration as generated by
\link{hipercow_parallel}, which defines which method, if any, will be used
to initialise your task for parallel execution.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A task id, a string of hex characters. Use this to
interact with the task.
}
\description{
Create a task from a script.  This will arrange to run the file
\code{script} via hipercow.  The script must exist within your hipercow
root, but you may change to the directory of the script as it
executes (otherwise we will evaluate from your current directory
relative to the hipercow root, as usual).
}
\examples{
hipercow_example_helper()

# Create a small script; this would usually be several lines of
# course.  The script will need to do something as a side effect
# to be worth calling, so here we write a file.
writeLines("saveRDS(mtcars, 'data.rds')", "script.R")

# Now create a task from this script
id <- task_create_script("script.R")
task_info(id)
task_wait(id)
task_result(id)
dir()
}
