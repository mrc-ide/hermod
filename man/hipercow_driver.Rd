% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/configure.R
\name{hipercow_driver}
\alias{hipercow_driver}
\title{Create a new hipercow driver; this is intended to be used from other
packages, and rarely called directly. If you are trying to run
tasks on a cluster you do not need to call this!}
\usage{
hipercow_driver(
  configure,
  submit,
  status,
  info,
  log,
  result,
  cancel,
  provision_run,
  provision_list,
  provision_compare
)
}
\arguments{
\item{configure}{Function used to set core configuration for the
driver.  This function will be called from the hipercow root
directory (so \code{getwd()} will report the correct path). It can
take any arguments, do any calculation and then must return any
R object that can be serialised.  The resulting configuration
will be passed in as \code{config} to other driver functions.}

\item{submit}{Submit a task to a cluster.  This is run after the
task is created (either automatically or manually) and takes as
arguments the task id, the configuration, the path to the root.}

\item{status}{Fetch a task status. Takes a vector of ids and
returns a vector of the same length of statuses.}

\item{info}{Fetch task info for a single task. May take longer
than \code{status} and expected to retrieve the true status from the
scheduler.}

\item{log}{Fetch the task log. Takes a single task id and an
integer (the number of lines already known) and returns a
character vector of new logs.  Return \code{NULL} (and not a zero
length character vector) if a log is not available.}

\item{result}{Fetch a task result.  If needed, copies the result
file into the current hipercow root.  Assume that a result is
available (i.e., we've already checked that the task status is
terminal)}

\item{cancel}{Cancel one or more tasks. Takes a vector of task
ids, and requests that these tasks are cancelled, returning a
list with elements \code{cancelled}: a logical vector the same length
indicating if cancellation was successful, and \code{time_started}:
the time that the task was started, or NA if the task was not
yet started.}

\item{provision_run}{Provision a library. Works with conan, and
must accept \code{method}, \code{config}, \code{path_root} followed by \code{...} to
pass through to \code{conan2::conan_configure}. It is expected this
function will trigger running conan to provision a library.}

\item{provision_list}{List previous installations (docs TBD).}

\item{provision_compare}{Test if a library is current.  It is
expected that this will call \code{conan2::conan_compare}}
}
\description{
Create a new hipercow driver; this is intended to be used from other
packages, and rarely called directly. If you are trying to run
tasks on a cluster you do not need to call this!
}
