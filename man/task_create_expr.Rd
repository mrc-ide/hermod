% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_expr}
\alias{task_create_expr}
\title{Create a task based on an expression}
\usage{
task_create_expr(
  expr,
  environment = "default",
  driver = NULL,
  resources = NULL,
  envvars = NULL,
  parallel = NULL,
  root = NULL
)
}
\arguments{
\item{expr}{The expression, does not need quoting. See Details.}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{driver}{Name of the driver to use to submit the task.  The
default (\code{NULL}) depends on your configured drivers; if you have
no drivers configured no submission happens (or indeed is
possible).  If you have exactly one driver configured we'll
submit your task with it.  If you have more than one driver
configured, then we will error, though in future versions we may
fall back on a default driver if you have one configured.  If
you pass \code{FALSE} here, submission is prevented even if you have
no driver configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.}

\item{parallel}{Parallel configuration as generated by
\link{hipercow_parallel}, which defines which method, if any, will be used
to initialise your task for parallel execution.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A task id, a string of hex characters. Use this to
interact with the task.
}
\description{
Create a task based on an expression. This is similar to
\link{task_create_explicit} except more magic, and is closer to
the interface that we expect people will use.
}
\details{
The expression passed as \code{expr} will typically be a function call
(e.g., \code{f(x)}).  We will analyse the expression and find all
variables that you reference (in the case of \code{f(x)} this is \code{x})
and combine this with the function name to run on the cluster.  If
\code{x} cannot be found in your calling environment we will error;
this behaviour is subject to change so let us know if you have
other thoughts.

Alternatively you may provide a multiline statement by using \code{{}}
to surround multiple lines, such as:

\if{html}{\out{<div class="sourceCode">}}\preformatted{task_create_expr(\{
  x <- runif(1)
  f(x)
\}, ...)
}\if{html}{\out{</div>}}

in this case, we apply a simple heuristic to work out that \code{x} is
locally assigned and should not be saved with the expression.

If you reference values that require a lot of memory, \code{hipercow}
will error and refuse to save the task.  This is to prevent you
accidentally including values that you will make available through an
environment, and to prevent making the \code{hipercow} directory
excessively large.  Docs on controlling this process are still to
be written.
}
\examples{
cleanup <- hipercow_example_helper()

# Similar to task_create_explicit, but we don't include the 'quote'
id <- task_create_expr(runif(5))
task_wait(id)
task_result(id)

# Unlike task_create_explicit, variables are automatically included:
n <- 3
id <- task_create_expr(runif(n))
task_info(id)
task_wait(id)
task_result(id)

cleanup()
}
