% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_expr}
\alias{task_create_expr}
\title{Create a task based on an expression}
\usage{
task_create_expr(
  expr,
  environment = "default",
  submit = NULL,
  resources = NULL,
  envvars = NULL,
  root = NULL
)
}
\arguments{
\item{expr}{The expression, does not need quoting. See Details.}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{submit}{Control over task submission. This will expand over
time once we support specifying resources. The most simple
interface is to use \code{TRUE} here to automatically submit a task,
using your default configuration, or \code{FALSE} to prevent
submission.  The default \code{NULL} will submit a task if a driver
is configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A task id, a string of hex characters. Use this to
interact with the task.
}
\description{
Create a task based on an expression. This is similar to
\link{task_create_explicit} except more magic, and is closer to
the interface that we expect people will use.
}
\details{
The expression passed as \code{expr} will typicaly be a function call
(e.g., \code{f(x)}).  We will analyse the expression and find all
variables that you reference (in the case of \code{f(x)} this is \code{x})
and combine this with the function name to run on the cluster.  If
\code{x} cannot be found in your calling environment we will error;
this behaviour is subject to change so let us know if you have
other thoughts.

Alternatively you may provide a multiline statment by using \code{{}}
to surround multiple lines, such as:

\if{html}{\out{<div class="sourceCode">}}\preformatted{task_create_expr(\{
  x <- runif(1)
  f(x)
\}, ...)
}\if{html}{\out{</div>}}

in this case, we apply a simple heuristic to work out that \code{x} is
locally assigned and should not be saved with the expression.

If you reference values that require a lot of memory, \code{hipercow}
will error and refuse to save the task.  This is to prevent you
accidentally values that you will make available through an
environment, and to prevent making the \code{hipercow} directory
excessibly large.  Docs on controlling this process are still to
be written.
}
