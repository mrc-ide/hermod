% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task-create.R
\name{task_create_bulk_call}
\alias{task_create_bulk_call}
\title{Create bulk tasks from a call}
\usage{
task_create_bulk_call(
  fn,
  data,
  args = NULL,
  environment = "default",
  bundle_name = NULL,
  driver = NULL,
  resources = NULL,
  envvars = NULL,
  parallel = NULL,
  root = NULL
)
}
\arguments{
\item{fn}{The function to call}

\item{data}{The data to apply the function over.  This can be a
vector or list, in which case we act like \code{lapply} and apply
\code{fn} to each element in turn.  Alternatively, this can be a
\link{data.frame}, in which case each row is taken as a set of
arguments to \code{fn}.  Note that if \code{data} is a \code{data.frame} then
all arguments to \code{fn} are named.}

\item{args}{Additional arguments to \code{fn}, shared across all calls.
These must be named.  If you are using a \code{data.frame} for
\code{data}, you'd probably be better off adding additional columns
that don't vary across rows, but the end result is the same.}

\item{environment}{Name of the hipercow environment to evaluate the
task within.}

\item{bundle_name}{Name to pass to \code{\link{hipercow_bundle_create}} when
making a bundle. If \code{NULL} we use a random name.  We always
overwrite, so if \code{bundle_name} already refers to a bundle it
will be replaced.}

\item{driver}{Name of the driver to use to submit the task.  The
default (\code{NULL}) depends on your configured drivers; if you have
no drivers configured no submission happens (or indeed is
possible).  If you have exactly one driver configured we'll
submit your task with it.  If you have more than one driver
configured, then we will error, though in future versions we may
fall back on a default driver if you have one configured.  If
you pass \code{FALSE} here, submission is prevented even if you have
no driver configured.
is configured.}

\item{resources}{A list generated by \link{hipercow_resources} giving
the cluster resource requirements to run your task.}

\item{envvars}{Environment variables as generated by
\link{hipercow_envvars}, which you might use to control your task.}

\item{parallel}{Parallel configuration as generated by
\link{hipercow_parallel}, which defines which method, if any, will be used
to initialise your task for parallel execution.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
A \code{hipercow_bundle} object, which groups together tasks,
and for which you can use a set of grouped functions to get
status (\code{hipercow_bundle_status}), results
(\code{hipercow_bundle_result}) etc.
}
\description{
Create a bulk set of tasks based on applying a function over a
vector or \link{data.frame}.  This is the bulk equivalent of
\link{task_create_call}, in the same way that \link{task_create_bulk_expr}
is a bulk version of \link{task_create_expr}.
}
\examples{
cleanup <- hipercow_example_helper()

# The simplest way to use this function is like lapply:
x <- runif(5)
bundle <- task_create_bulk_call(sqrt, x)
hipercow_bundle_wait(bundle)
hipercow_bundle_result(bundle) # lapply(x, sqrt)

# You can pass additional arguments in via 'args':
x <- runif(5)
bundle <- task_create_bulk_call(log, x, list(base = 3))
hipercow_bundle_wait(bundle)
hipercow_bundle_result(bundle) # lapply(x, log, base = 3)

# Passing in a data.frame acts like Map (though with all arguments named)
x <- data.frame(a = runif(5), b = rpois(5, 10))
bundle <- task_create_bulk_call(function(a, b) sum(rnorm(b)) / a, x)
hipercow_bundle_wait(bundle)
hipercow_bundle_result(bundle) # Map(f, x$a, x$b)

cleanup()
}
