% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bundle.R
\name{hipercow_bundle_retry}
\alias{hipercow_bundle_retry}
\title{Retry task bundle}
\usage{
hipercow_bundle_retry(bundle, if_status_in = NULL, submit = NULL, root = NULL)
}
\arguments{
\item{bundle}{Either a \link{hipercow_bundle} object, or the name of a
bundle.}

\item{if_status_in}{Optionally, a character vector of task
statuses for which we should retry tasks.  For example, pass
\code{if_status_in = c("cancelled", "failure")} to retry cancelled
and failed tasks.  Can only be terminal statuses (\code{cancelled},
\code{failure}, \code{success}).}

\item{submit}{Control over task submission. This will expand over
time once we support specifying resources. The most simple
interface is to use \code{TRUE} here to automatically submit a task,
using your default configuration, or \code{FALSE} to prevent
submission.  The default \code{NULL} will submit a task if a driver
is configured.}

\item{root}{A hipercow root, or path to it. If \code{NULL} we search up
your directory tree.}
}
\value{
Invisibly, a logical vector, indicating which of the tasks
within the bundle were retried. This means that it's not
immediately obvious how you can get the new id back from the
tasks, but typically that is unimportant, as all bundle
functions follow retries by default.
}
\description{
Retry tasks in a bundle.  This has slightly different semantics to
\code{\link[=task_retry]{task_retry()}}, which errors if a retry is not possible.  Here, we
anticipate that much of the time you will be interested in
retrying some fraction of your bundle and so don't need to wait
until all tasks have finished in order to retry failed tasks.
}
